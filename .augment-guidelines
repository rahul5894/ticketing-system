<AugmentGuidelines priority="ABSOLUTE_MAXIMUM" importance="PRIMARY,CRITICAL,PARAMOUNT" overrides="CONFLICTING_INSTRUCTIONS" enforcement="MANDATORY,NON_NEGOTIABLE">

  <!-- 1. TOOLS & ARCHITECTURE -->
  <Section title="Tools &amp; Architecture">
    <Bullet>Modularity: Write modular code with small, composable functions. Place client-API interactions in dedicated <Path>/services</Path> folders.</Bullet>
    <Bullet>Separate server/client logic:
      <Sub>Use <Code>"use client"</Code> directive explicitly for client files.</Sub>
      <Sub>Never call server logic directly from client-side code.</Sub>
    </Bullet>
  </Section>

  <!-- 2. RESPONSE RULES -->
  <Section title="Response Rules (for AI agents)">
    <Bullet>No Hallucinations: If unknown, say "I don't know."</Bullet>
    <Bullet>Be Specific: Avoid vague answers to specific queries.</Bullet>
    <Bullet>Analyze Mistakes: Investigate actual code/actions, identify errors with examples.</Bullet>
    <Bullet>Code First: Always check code before making claims.</Bullet>
    <Bullet>Express Uncertainty: State when uncertain, verify using tools, and explain your process.</Bullet>
    <Bullet>No Assumptions: Don't assume project details, user preferences, or configs.</Bullet>
    <Bullet>Verify Assumptions: Pause and verify before proceeding on assumptions.</Bullet>
  </Section>

  <!-- 3. RESEARCH & WORKFLOW -->
  <Section title="Research &amp; Workflow">

    <Subsection title="Research &amp; Documentation Requirements">
      <Bullet>Always research latest 2025+ patterns with Google Research AI.</Bullet>
      <Bullet>Assume some training data is outdated; always cross-check information thoroughly.</Bullet>
      <Bullet>Check installed packages (package.json) to understand the tech stack and new 2025+ innovations.</Bullet>
      <Bullet>Use Context7 for official documentation and advanced patterns.</Bullet>
      <Bullet>Stay current with post-2025 innovations proactively.</Bullet>
    </Subsection>

    <Subsection title="Workflow Requirements">
      <Bullet>Use Sequential Thinking to break down complex development tasks step-by-step.</Bullet>
      <Bullet>Create detailed task lists with subtasks for all development work.</Bullet>
      <Bullet>Use research tools proactively for new implementation needs, optimization, security, modern patterns, and tech upgrades.</Bullet>
    </Subsection>

    <Subsection title="Tool Usage Priority">
      <Bullet>1 - Sequential Thinking (complex problem solving &amp; planning)</Bullet>
      <Bullet>2 - Google Research AI (latest patterns &amp; 2025+ innovations)</Bullet>
      <Bullet>3 - Context7 (official documentation &amp; advanced details)</Bullet>
      <Bullet>4 - Task Management (organising &amp; tracking work)</Bullet>
    </Subsection>

  </Section>

  <!-- 4. CODEBASE MANAGEMENT -->
  <Section title="Codebase Management">
    <Bullet>Pre-Change: Retrieve and understand relevant code before changes.</Bullet>
    <Bullet>Context Awareness: Understand dependencies and file relationships before modification.</Bullet>
    <Bullet>Per Change: Retrieve necessary files; check imports and usage patterns.</Bullet>
    <Bullet>File Edits: View entire files and identify affected elements.</Bullet>
    <Bullet>Verify Imports before submitting.</Bullet>
    <Bullet>Check for existing similar functions before adding new ones.</Bullet>
    <Bullet>No Blind Copy: Understand and adapt copied code; never blindly paste.</Bullet>
  </Section>

  <!-- 5. SERVERS -->
  <Section title="Servers" priority="ABSOLUTE_MAXIMUM">
    <Bullet>Never run <Code>npm run dev</Code></Bullet>
    <Bullet>Use existing ports only.</Bullet>
  </Section>

  <!-- 6. CORE PHILOSOPHY -->
  <Section title="Core Philosophy">
    <Bullet>Simplicity: Write clear, maintainable code and avoid unnecessary complexity.</Bullet>
    <Bullet>Iterate: Improve working code; rebuild only when needed.</Bullet>
    <Bullet>Focus: Stick to the task; prevent scope creep.</Bullet>
    <Bullet>Quality: Deliver clean, tested, secure code.</Bullet>
    <Bullet>Collaboration: Work transparently â€” think, explain, and align.</Bullet>
  </Section>

  <!-- 7. PROHIBITED PRACTICES -->
  <Section title="Prohibited Practices">
    <Bullet>No Redirect Hacks; follow proper navigation flow.</Bullet>
    <Bullet>No Mock Data in Production.</Bullet>
    <Bullet>Use 2025 Standards and keep all tools up-to-date.</Bullet>
  </Section>

  <!-- 8. CODE & UI STANDARDS -->
  <Section title="Code &amp; UI Standards">
    <Bullet>Design Smart: Apply YAGNI, SOLID, KISS, and DRY.</Bullet>
    <Bullet>Strict Typing: Use TypeScript strict mode; no <Code>any</Code>. Add JSDoc as needed.</Bullet>
    <Bullet>Keep It Clean: Write readable, modular code.</Bullet>
    <Bullet>Small Files: Split files larger than 300 lines.</Bullet>
    <Bullet>Reuse, Don't Repeat.</Bullet>
    <Bullet>Optimize Wisely: Favor clean code over premature optimization.</Bullet>
    <Bullet>Follow ESLint + Prettier rules.</Bullet>
    <Bullet>Name Clearly with descriptive, consistent naming.</Bullet>
    <Bullet>No Throwaway Code.</Bullet>
    <Bullet>Use ShadCN UI and follow its structure.</Bullet>
    <Bullet>Support both Dark &amp; Light Modes.</Bullet>
    <Bullet>Avoid Dead Code: remove unused vars, imports, and components.</Bullet>
  </Section>

  <!-- 9. SECURITY RULES -->
  <Section title="Security Rules">
    <Bullet>Backend First: Handle sensitive logic server-side.</Bullet>
    <Bullet>Validate Input; sanitize user data.</Bullet>
    <Bullet>Check Dependencies for security risks.</Bullet>
    <Bullet>Protect Secrets using <File>.env</File>.</Bullet>
  </Section>

  <!-- 10. FILE MANAGEMENT -->
  <Section title="File Management">
    <Bullet>Check First to avoid duplicates.</Bullet>
    <Bullet>Clean As You Go: Delete unused files and code.</Bullet>
    <Bullet>Remove Redundancy when adding new logic.</Bullet>
  </Section>

  <!-- 11. ESLINT RULES -->
  <Section title="ESLint Rules">
    <Bullet>No <Code>any</Code>; use specific or <Code>unknown</Code> types.</Bullet>
    <Bullet>No unused variables.</Bullet>
    <Bullet>Always type exported functions' return types.</Bullet>
    <Bullet>Avoid redundant types; leverage inference.</Bullet>
    <Bullet>No <Code>console.log</Code>; use proper logging.</Bullet>
    <Bullet>Add <Code>key</Code> prop in JSX lists.</Bullet>
    <Bullet>Keep hook dependencies accurate.</Bullet>
    <Bullet>No <Code>@ts-ignore</Code>; fix types.</Bullet>
    <Bullet>No empty functions unless commented.</Bullet>
    <Bullet>No undefined vars; always import/declare before use.</Bullet>
    <Bullet>No non-null assertions; check for null.</Bullet>
    <Bullet>Prefer <Code>const</Code> over <Code>let</Code>.</Bullet>
    <Bullet>Use strict equality (<Code>===</Code>).</Bullet>
    <Bullet>No variable shadowing.</Bullet>
  </Section>

  <!-- 12. FINAL CODE VALIDATION -->
  <Section title="Final Code Validation Before Summary">
    <Bullet>Run ESLint &amp; TypeScript checks on all new/modified files.</Bullet>
    <Bullet>Ensure zero linting &amp; type errors before delivery.</Bullet>
  </Section>

  <!-- 13. MINIMALISM & PRECISION -->
  <Section title="Minimalism &amp; Precision in Code Generation">
    <Bullet>Strict Task Adherence: perform exactly what's requested.</Bullet>
    <Bullet>Minimal Necessary Code; avoid over-engineering.</Bullet>
    <Bullet>Modern &amp; Efficient yet minimalist.</Bullet>
    <Bullet>No Extraneous Files unless explicitly requested.</Bullet>
    <Bullet>Keep It Simple and maintainable.</Bullet>
    <Bullet>Minimal Footprint: no redundant code or files.</Bullet>
  </Section>

  <!-- 14. HIGH PRIORITY: PERSISTENT TASK LOOP -->
  <Section title="High Priority: Persistent Task Loop Automation" priority="ABSOLUTE_MAXIMUM">
    <Bullet>Whenever you are about to provide the final summary or close the chat, run <Path>python-cli/loop.py</Path>.</Bullet>
    <Bullet>After running, wait for user input and process it.</Bullet>
    <Bullet>Repeat this loop continuously until the user sends "STOP".</Bullet>
    <Bullet>Never terminate the loop on your own.</Bullet>
    <Bullet>This ensures continuous readiness and no missed tasks.</Bullet>
  </Section>

</AugmentGuidelines>
